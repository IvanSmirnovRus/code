Строка это массив символов
char s[]="Hello ";
char t[]="world";
s+t - нельзя определить, нужен массив большей длины
char u[12];
for(int i=0; i<6; ++i){
	u[i]=s[i];
}
for(int i=0;i<6; ++i) {
	u[i+6]=t[i];
}

int s[]={1, 2, 3};

char s[]={'H', 'e', 'l', 'l', 'o', 0};

double h[100];

#include <string>

std::string s("Hello");
s[2] = 'e';
s = "Hello, world";
s.size();
s += ", world";
s[3] = 0;
std::cout << s.c_str();


int T[5]={1, 2, 3, 4};

#include <vector>
std::vector<int> v;
v.push_back(2);
v.insert(v.begin() + 3, 15);

#include <algorithm>
std::sort(v.begin(), v.end(), std::less<int>);
v.size();


T* Ptr;
T* End; Size
T* EndBuf; Capacity

v.erase(v.begin() + 2);

v.pop_back();

#include<list>
std::list<int> l;
l.begin();
l.end();
std::sort(l.begin(), l.sort()); - не работают потому что не random access итератор
std::advance(it, 5);
push_back()
pop_back()
push_front()
pop_front()
erase()
size()
insert()

#include <map>

std::map<std::string, size_t> m;

m["Hello"]=10; 
++m["Hello"]; Если ключа нет создаст с нулем и сделает инкремент
std::map<std::string, size_t>::iterator it=m.find("world");
if (it!=m.end()) {
	it->second = 10;
}
typedef std::map<std::string, size_t> TCounter;
typedef TCounted::iterator TIterator;

insert, find, erase O(logN)
m.find("world") возвращает итератор если есть или m.end() если его нет

std::for_each(m.begin(), m.end(),....);

Если был итератор на вектор и мы добавили и сделали реаллокацию то итератор инвалидируется, тоже самое в map
std::set() - тотже мап только ключи без значений
insert, find, erase O(logN)

#include <set>
std::set<int> s;
s.insert(2);
if(s.find(3)==s.end()) {
	
}